# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:16:39+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query

from models import (
    ApiMembersHistoryGetResponse,
    ApiPostsDepartmentsTypeGetResponse,
    ApiPostsGovernmentPostsGetResponse,
    ApiPostsOppositionPostsGetResponse,
    ApiPostsSpeakerAndDeputiesForDateGetResponse,
    ApiPostsSpokespersonsGetResponse,
    ApiReferenceAnsweringBodiesGetResponse,
    ApiReferenceDepartmentsGetResponse,
    ApiReferencePolicyInterestsGetResponse,
    BiographyExperienceListItem,
    ConstituencyItem,
    ConstituencyMembersServiceSearchResult,
    ConstituencyRepresentationListItem,
    ContactInformationListItem,
    DebateContributionMembersServiceSearchResult,
    EarlyDayMotionMembersServiceSearchResult,
    ElectionResultItem,
    ElectionResultListItem,
    House,
    Ids,
    LocationItem,
    LocationType,
    LordsByTypeMembersServiceSearchResult,
    MemberBiographyItem,
    MemberFocusListItem,
    MemberItem,
    MemberMembersServiceSearchResult,
    MembershipEndedMembershipEndReasonIds,
    MembersInterestsMembersServiceSearchResult,
    MembersStaffMembersServiceSearchResult,
    PartyMembersServiceSearchResult,
    PartySeatCountMembersServiceSearchResult,
    PortraitCropEnum,
    PostType,
    RegisteredInterestCategoryListItem,
    StaffListItem,
    StringItem,
    VoteMembersServiceSearchResult,
    WrittenQuestionMembersServiceSearchResult,
)

app = MCPProxy(
    contact={
        'email': 'softwareengineering@parliament.uk',
        'name': 'UK Parliament',
        'url': 'https://www.parliament.uk/',
    },
    description='An API which retrieves Members data.',
    title='Members API',
    version='v1',
)


@app.get(
    '/api/Location/Browse/{locationType}/{locationName}',
    tags=['location_info_fetching'],
)
def get_api__location__browse__location_type__location_name(
    location_type: LocationType = Path(..., alias='locationType'),
    location_name: str = Path(..., alias='locationName'),
):
    """
    Returns a list of locations, both parent and child
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Location/Constituency/Search', tags=['location_info_fetching'])
def get_api__location__constituency__search(
    search_text: Optional[str] = Query(None, alias='searchText'),
    skip: Optional[int] = 0,
    take: Optional[int] = 20,
):
    """
    Returns a list of constituencies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Location/Constituency/{id}', tags=['location_info_fetching'])
def get_api__location__constituency__id(id: int):
    """
    Returns a constituency by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Location/Constituency/{id}/ElectionResult/Latest',
    tags=['election_results_fetching', 'location_info_fetching'],
)
def get_api__location__constituency__id__election_result__latest(id: int):
    """
    Returns latest election result by constituency id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Location/Constituency/{id}/ElectionResult/{electionId}',
    tags=['election_results_fetching', 'location_info_fetching'],
)
def get_election_result_by_constituency_and_id(
    id: int, election_id: int = Path(..., alias='electionId')
):
    """
    Returns an election result by constituency and election id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Location/Constituency/{id}/ElectionResults',
    tags=['location_info_fetching', 'election_results_fetching'],
)
def get_api__location__constituency__id__election_results(id: int):
    """
    Returns a list of election results by constituency ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Location/Constituency/{id}/Geometry', tags=['location_info_fetching'])
def get_api__location__constituency__id__geometry(id: int):
    """
    Returns geometry by constituency ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Location/Constituency/{id}/Representations', tags=['location_info_fetching']
)
def get_api__location__constituency__id__representations(id: int):
    """
    Returns a list of representations by constituency ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Location/Constituency/{id}/Synopsis', tags=['location_info_fetching'])
def get_api__location__constituency__id__synopsis(id: int):
    """
    Returns a synopsis by constituency ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/LordsInterests/Register', tags=['member_communication_details'])
def get_api__lords_interests__register(
    search_term: Optional[str] = Query(None, alias='searchTerm'),
    page: Optional[int] = None,
    include_deleted: Optional[bool] = Query(False, alias='includeDeleted'),
):
    """
    Returns a list of registered interests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/LordsInterests/Staff',
    tags=['member_profile_management', 'member_communication_details'],
)
def get_api__lords_interests__staff(
    search_term: Optional[str] = Query(None, alias='searchTerm'),
    page: Optional[int] = None,
):
    """
    Returns a list of staff
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/History',
    tags=['historical_member_records', 'member_profile_management'],
)
def get_api__members__history(ids: Optional[Ids] = None):
    """
    Return members by ID with list of their historical names, parties and memberships
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/Search', tags=['member_profile_management', 'political_party_status']
)
def get_api__members__search(
    name: Optional[str] = Query(None, alias='Name'),
    location: Optional[str] = Query(None, alias='Location'),
    post_title: Optional[str] = Query(None, alias='PostTitle'),
    party_id: Optional[int] = Query(None, alias='PartyId'),
    house: Optional[House] = Query(None, alias='House'),
    constituency_id: Optional[int] = Query(None, alias='ConstituencyId'),
    name_starts_with: Optional[str] = Query(None, alias='NameStartsWith'),
    gender: Optional[str] = Query(None, alias='Gender'),
    membership_started_since: Optional[datetime] = Query(
        None, alias='MembershipStartedSince'
    ),
    membership_ended__membership_ended_since: Optional[datetime] = Query(
        None, alias='MembershipEnded.MembershipEndedSince'
    ),
    membership_ended__membership_end_reason_ids: Optional[
        MembershipEndedMembershipEndReasonIds
    ] = Query(None, alias='MembershipEnded.MembershipEndReasonIds'),
    membership_in_date_range__was_member_on_or_after: Optional[datetime] = Query(
        None, alias='MembershipInDateRange.WasMemberOnOrAfter'
    ),
    membership_in_date_range__was_member_on_or_before: Optional[datetime] = Query(
        None, alias='MembershipInDateRange.WasMemberOnOrBefore'
    ),
    membership_in_date_range__was_member_of_house: Optional[House] = Query(
        None, alias='MembershipInDateRange.WasMemberOfHouse'
    ),
    is_eligible: Optional[bool] = Query(None, alias='IsEligible'),
    is_current_member: Optional[bool] = Query(None, alias='IsCurrentMember'),
    policy_interest_id: Optional[int] = Query(None, alias='PolicyInterestId'),
    experience: Optional[str] = Query(None, alias='Experience'),
    skip: Optional[int] = 0,
    take: Optional[int] = 20,
):
    """
    Returns a list of current members of the Commons or Lords
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/SearchHistorical',
    tags=['member_profile_management', 'historical_member_records'],
)
def get_api__members__search_historical(
    name: Optional[str] = None,
    date_to_search_for: Optional[datetime] = Query(None, alias='dateToSearchFor'),
    skip: Optional[int] = 0,
    take: Optional[int] = 20,
):
    """
    Returns a list of members of the Commons or Lords
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Members/{id}', tags=['member_profile_management'])
def get_api__members__id(
    id: int, details_for_date: Optional[datetime] = Query(None, alias='detailsForDate')
):
    """
    Return member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Biography',
    tags=['member_profile_management', 'historical_member_records'],
)
def get_api__members__id__biography(id: int):
    """
    Return biography of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Contact',
    tags=['member_profile_management', 'member_communication_details'],
)
def get_api__members__id__contact(id: int):
    """
    Return list of contact details of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Members/{id}/ContributionSummary', tags=['member_profile_management'])
def get_api__members__id__contribution_summary(id: int, page: Optional[int] = None):
    """
    Return contribution summary of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Edms',
    tags=[
        'member_profile_management',
        'historical_member_records',
        'member_queries_documents',
    ],
)
def get_api__members__id__edms(id: int, page: Optional[int] = None):
    """
    Return list of early day motions of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Members/{id}/Experience', tags=['member_profile_management'])
def get_api__members__id__experience(id: int):
    """
    Return experience of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Members/{id}/Focus', tags=['member_profile_management'])
def get_api__members__id__focus(id: int):
    """
    Return list of areas of focus of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/LatestElectionResult',
    tags=['election_results_fetching', 'member_profile_management'],
)
def get_api__members__id__latest_election_result(id: int):
    """
    Return latest election result of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Portrait',
    tags=['member_profile_management', 'member_image_management'],
)
def get_api__members__id__portrait(
    id: int,
    crop_type: Optional[PortraitCropEnum] = Query(None, alias='cropType'),
    web_version: Optional[bool] = Query(True, alias='webVersion'),
):
    """
    Return portrait of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/PortraitUrl',
    tags=['member_image_management', 'member_profile_management'],
)
def get_api__members__id__portrait_url(id: int):
    """
    Return portrait url of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/RegisteredInterests',
    tags=['member_profile_management', 'member_communication_details'],
)
def get_api__members__id__registered_interests(id: int, house: Optional[House] = None):
    """
    Return list of registered interests of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Staff',
    tags=['member_profile_management', 'member_communication_details'],
)
def get_api__members__id__staff(id: int):
    """
    Return list of staff of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Members/{id}/Synopsis', tags=['member_profile_management'])
def get_api__members__id__synopsis(id: int):
    """
    Return synopsis of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Thumbnail',
    tags=['member_image_management', 'member_profile_management'],
)
def get_api__members__id__thumbnail(id: int):
    """
    Return thumbnail of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/ThumbnailUrl',
    tags=['member_image_management', 'member_profile_management'],
)
def get_api__members__id__thumbnail_url(id: int):
    """
    Return thumbnail url of member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/Voting',
    tags=['election_results_fetching', 'member_profile_management'],
)
def get_api__members__id__voting(
    id: int, house: House = ..., page: Optional[int] = None
):
    """
    Return list of votes by member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Members/{id}/WrittenQuestions',
    tags=['member_queries_documents', 'member_profile_management'],
)
def get_api__members__id__written_questions(id: int, page: Optional[int] = None):
    """
    Return list of written questions by member by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Parties/GetActive/{house}', tags=['political_party_status'])
def get_api__parties__get_active__house(house: House):
    """
    Returns a list of current parties with at least one active member.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Parties/LordsByType/{forDate}', tags=['political_party_status'])
def get_api__parties__lords_by_type__for_date(
    for_date: datetime = Path(..., alias='forDate')
):
    """
    Returns the composition of the House of Lords by peerage type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Parties/StateOfTheParties/{house}/{forDate}', tags=['political_party_status']
)
def get_api__parties__state_of_the_parties__house__for_date(
    house: House, for_date: datetime = Path(..., alias='forDate')
):
    """
    Returns current state of parties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/Departments/{type}', tags=['government_positions_listing'])
def get_api__posts__departments__type(type: PostType):
    """
    Returns a list of departments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/GovernmentPosts', tags=['government_positions_listing'])
def get_api__posts__government_posts(
    department_id: Optional[int] = Query(None, alias='departmentId')
):
    """
    Returns a list of government posts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Posts/OppositionPosts', tags=['government_positions_listing'])
def get_api__posts__opposition_posts(
    department_id: Optional[int] = Query(None, alias='departmentId')
):
    """
    Returns a list of opposition posts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Posts/SpeakerAndDeputies/{forDate}', tags=['government_positions_listing']
)
def get_api__posts__speaker_and_deputies__for_date(
    for_date: datetime = Path(..., alias='forDate')
):
    """
    Returns a list containing the speaker and deputy speakers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/Posts/Spokespersons',
    tags=['government_positions_listing', 'member_profile_management'],
)
def get_api__posts__spokespersons(
    party_id: Optional[int] = Query(None, alias='partyId')
):
    """
    Returns a list of spokespersons.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Reference/AnsweringBodies', tags=['reference_information_access'])
def get_api__reference__answering_bodies(
    id: Optional[int] = None,
    name_contains: Optional[str] = Query(None, alias='nameContains'),
):
    """
    Returns a list of answering bodies.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Reference/Departments', tags=['government_positions_listing'])
def get_api__reference__departments(
    id: Optional[int] = None,
    name_contains: Optional[str] = Query(None, alias='nameContains'),
):
    """
    Returns a list of departments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Reference/Departments/{id}/Logo', tags=['reference_information_access'])
def get_api__reference__departments__id__logo(id: int):
    """
    Returns department logo.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/Reference/PolicyInterests', tags=['reference_information_access'])
def get_api__reference__policy_interests():
    """
    Returns a list of policy interest.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
