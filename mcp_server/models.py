# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:16:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, ConfigDict, RootModel


class BiographyExperience(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endMonth: Optional[int] = None
    endYear: Optional[int] = None
    id: Optional[int] = None
    organisation: Optional[str] = None
    startMonth: Optional[int] = None
    startYear: Optional[int] = None
    title: Optional[str] = None
    type: Optional[str] = None
    typeId: Optional[int] = None


class ContactInformation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[str] = None
    fax: Optional[str] = None
    isPreferred: Optional[bool] = None
    isWebAddress: Optional[bool] = None
    line1: Optional[str] = None
    line2: Optional[str] = None
    line3: Optional[str] = None
    line4: Optional[str] = None
    line5: Optional[str] = None
    notes: Optional[str] = None
    phone: Optional[str] = None
    postcode: Optional[str] = None
    type: Optional[str] = None
    typeDescription: Optional[str] = None
    typeId: Optional[int] = None


class DebateContribution(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    answerCount: Optional[int] = None
    debateId: Optional[int] = None
    debateTitle: Optional[str] = None
    debateWebsiteId: Optional[str] = None
    firstTimecode: Optional[datetime] = None
    house: Optional[str] = None
    interventionCount: Optional[int] = None
    pointsOfOrderCount: Optional[int] = None
    questionCount: Optional[int] = None
    section: Optional[str] = None
    sittingDate: Optional[datetime] = None
    speechCount: Optional[int] = None
    statementsCount: Optional[int] = None
    supplementaryQuestionCount: Optional[int] = None
    totalContributions: Optional[int] = None


class EarlyDayMotion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dateTabled: Optional[datetime] = None
    id: Optional[int] = None
    isAmendment: Optional[bool] = None
    isPrayer: Optional[bool] = None
    number: Optional[str] = None
    sponsorsCount: Optional[int] = None
    title: Optional[str] = None


class GenericReferenceData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    id: Optional[int] = None


class GovernmentDepartment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[int] = None
    imageUrl: Optional[str] = None
    name: Optional[str] = None
    url: Optional[str] = None


class GovernmentType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class GroupedQuestion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dateTabled: Optional[datetime] = None
    questionUin: Optional[str] = None


class House(Enum):
    integer_1 = 1
    integer_2 = 2


class Link(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    href: Optional[str] = None
    method: Optional[str] = None
    rel: Optional[str] = None


class LocationType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class MemberFocus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    category: Optional[str] = None
    focus: Optional[List[str]] = None


class MemberFocusListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[MemberFocus]] = None


class MemberName(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endDate: Optional[datetime] = None
    nameAddressAs: Optional[str] = None
    nameDisplayAs: Optional[str] = None
    nameFullTitle: Optional[str] = None
    nameListAs: Optional[str] = None
    startDate: Optional[datetime] = None


class MemberStatus(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class Party(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    abbreviation: Optional[str] = None
    backgroundColour: Optional[str] = None
    foregroundColour: Optional[str] = None
    governmentType: Optional[GovernmentType] = None
    id: Optional[int] = None
    isIndependentParty: Optional[bool] = None
    isLordsMainParty: Optional[bool] = None
    isLordsSpiritualParty: Optional[bool] = None
    name: Optional[str] = None


class PartyItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[Party] = None


class PartyMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[PartyItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class PartySeatCount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    female: Optional[int] = None
    male: Optional[int] = None
    nonBinary: Optional[int] = None
    party: Optional[Party] = None
    total: Optional[int] = None


class PartySeatCountItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[PartySeatCount] = None


class PartySeatCountMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[PartySeatCountItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class PortraitCropEnum(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2
    integer_3 = 3


class PostType(Enum):
    integer_0 = 0
    integer_1 = 1
    integer_2 = 2


class RegisteredInterest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    childInterests: Optional[List[RegisteredInterest]] = None
    createdWhen: Optional[datetime] = None
    deletedWhen: Optional[datetime] = None
    id: Optional[int] = None
    interest: Optional[str] = None
    isCorrection: Optional[bool] = None
    lastAmendedWhen: Optional[datetime] = None


class RegisteredInterestCategory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[int] = None
    interests: Optional[List[RegisteredInterest]] = None
    name: Optional[str] = None
    sortOrder: Optional[int] = None


class RegisteredInterestCategoryListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[RegisteredInterestCategory]] = None


class Staff(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    details: Optional[str] = None
    forename: Optional[str] = None
    surname: Optional[str] = None
    title: Optional[str] = None


class StaffListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[Staff]] = None


class StringItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[str] = None


class Vote(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    actedAsTeller: Optional[bool] = None
    date: Optional[datetime] = None
    divisionNumber: Optional[int] = None
    house: Optional[House] = None
    id: Optional[int] = None
    inAffirmativeLobby: Optional[bool] = None
    numberAgainst: Optional[int] = None
    numberInFavour: Optional[int] = None
    title: Optional[str] = None


class VoteItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[Vote] = None


class VoteMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[VoteItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class Ids(RootModel[List[int]]):
    root: List[int]


class MembershipEndedMembershipEndReasonIds(RootModel[List[int]]):
    root: List[int]


class ApiPostsDepartmentsTypeGetResponse(RootModel[List[GovernmentDepartment]]):
    root: List[GovernmentDepartment]


class ApiReferenceDepartmentsGetResponse(RootModel[List[GovernmentDepartment]]):
    root: List[GovernmentDepartment]


class ApiReferencePolicyInterestsGetResponse(RootModel[List[GenericReferenceData]]):
    root: List[GenericReferenceData]


class AnsweringBody(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    department: Optional[GovernmentDepartment] = None
    id: Optional[int] = None
    name: Optional[str] = None
    shortName: Optional[str] = None
    target: Optional[str] = None


class BiographyExperienceListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[BiographyExperience]] = None


class BiographyItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    additionalInfo: Optional[str] = None
    additionalInfoLink: Optional[str] = None
    endDate: Optional[datetime] = None
    house: Optional[House] = None
    id: Optional[int] = None
    name: Optional[str] = None
    startDate: Optional[datetime] = None


class ContactInformationListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[ContactInformation]] = None


class DebateContributionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[DebateContribution] = None


class DebateContributionMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[DebateContributionItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class EarlyDayMotionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[EarlyDayMotion] = None


class EarlyDayMotionMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[EarlyDayMotionItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class ElectionCandidate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    memberId: Optional[int] = None
    name: Optional[str] = None
    party: Optional[Party] = None
    rankOrder: Optional[int] = None
    resultChange: Optional[str] = None
    voteShare: Optional[float] = None
    votes: Optional[int] = None


class ElectionResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    candidates: Optional[List[ElectionCandidate]] = None
    constituencyName: Optional[str] = None
    electionDate: Optional[datetime] = None
    electionId: Optional[int] = None
    electionTitle: Optional[str] = None
    electorate: Optional[int] = None
    isGeneralElection: Optional[bool] = None
    isNotional: Optional[bool] = None
    majority: Optional[int] = None
    result: Optional[str] = None
    turnout: Optional[int] = None
    winningParty: Optional[Party] = None


class ElectionResultItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[ElectionResult] = None


class ElectionResultListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[ElectionResult]] = None


class HouseMembershipStatus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    status: Optional[MemberStatus] = None
    statusDescription: Optional[str] = None
    statusId: Optional[int] = None
    statusIsActive: Optional[bool] = None
    statusNotes: Optional[str] = None
    statusStartDate: Optional[datetime] = None


class LocationContext(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[int] = None
    name: Optional[str] = None
    type: Optional[LocationType] = None
    typeName: Optional[str] = None


class LordsByType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bishop: Optional[int] = None
    hereditary: Optional[int] = None
    life: Optional[int] = None
    party: Optional[Party] = None
    total: Optional[int] = None


class LordsByTypeItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[LordsByType] = None


class LordsByTypeMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[LordsByTypeItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class MemberBiography(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    committeeMemberships: Optional[List[BiographyItem]] = None
    electionsContested: Optional[List[BiographyItem]] = None
    governmentPosts: Optional[List[BiographyItem]] = None
    houseMemberships: Optional[List[BiographyItem]] = None
    oppositionPosts: Optional[List[BiographyItem]] = None
    otherPosts: Optional[List[BiographyItem]] = None
    partyAffiliations: Optional[List[BiographyItem]] = None
    representations: Optional[List[BiographyItem]] = None


class MemberBiographyItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[MemberBiography] = None


class MemberParty(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endDate: Optional[datetime] = None
    party: Optional[Party] = None
    startDate: Optional[datetime] = None


class ApiReferenceAnsweringBodiesGetResponse(RootModel[List[AnsweringBody]]):
    root: List[AnsweringBody]


class HouseMembership(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    house: Optional[House] = None
    membershipEndDate: Optional[datetime] = None
    membershipEndReason: Optional[str] = None
    membershipEndReasonId: Optional[int] = None
    membershipEndReasonNotes: Optional[str] = None
    membershipFrom: Optional[str] = None
    membershipFromId: Optional[int] = None
    membershipStartDate: Optional[datetime] = None
    membershipStatus: Optional[HouseMembershipStatus] = None


class Location(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    childContexts: Optional[List[LocationContext]] = None
    context: Optional[LocationContext] = None
    parentContext: Optional[LocationContext] = None
    stateOfTheParties: Optional[List[PartySeatCount]] = None


class LocationItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[Location] = None


class Member(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gender: Optional[str] = None
    id: Optional[int] = None
    latestHouseMembership: Optional[HouseMembership] = None
    latestParty: Optional[Party] = None
    nameAddressAs: Optional[str] = None
    nameDisplayAs: Optional[str] = None
    nameFullTitle: Optional[str] = None
    nameListAs: Optional[str] = None
    thumbnailUrl: Optional[str] = None


class MemberHistory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    houseMembershipHistory: Optional[List[HouseMembership]] = None
    id: Optional[int] = None
    nameHistory: Optional[List[MemberName]] = None
    partyHistory: Optional[List[MemberParty]] = None
    thumbnailUrl: Optional[str] = None


class MemberHistoryItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[MemberHistory] = None


class MemberItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[Member] = None


class MemberMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[MemberItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class MembersInterests(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interestCategories: Optional[List[RegisteredInterestCategory]] = None
    member: Optional[Member] = None


class MembersInterestsItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[MembersInterests] = None


class MembersInterestsMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[MembersInterestsItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class MembersStaff(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    member: Optional[Member] = None
    staff: Optional[List[Staff]] = None


class MembersStaffItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[MembersStaff] = None


class MembersStaffMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[MembersStaffItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class WrittenQuestion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    answerIsCorrection: Optional[bool] = None
    answerIsHolding: Optional[bool] = None
    answerText: Optional[str] = None
    answeringBody: Optional[AnsweringBody] = None
    answeringBodyId: Optional[int] = None
    answeringMember: Optional[Member] = None
    answeringMemberId: Optional[int] = None
    askingMemberId: Optional[int] = None
    attachmentCount: Optional[int] = None
    correctingMember: Optional[Member] = None
    correctingMemberId: Optional[int] = None
    dateAnswered: Optional[datetime] = None
    dateForAnswer: Optional[datetime] = None
    dateTabled: Optional[datetime] = None
    groupedQuestions: Optional[List[str]] = None
    groupedQuestionsDates: Optional[List[GroupedQuestion]] = None
    heading: Optional[str] = None
    house: Optional[House] = None
    id: Optional[int] = None
    isNamedDay: Optional[bool] = None
    isWithdrawn: Optional[bool] = None
    memberHasInterest: Optional[bool] = None
    questionText: Optional[str] = None
    uin: Optional[str] = None


class WrittenQuestionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[WrittenQuestion] = None


class WrittenQuestionMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[WrittenQuestionItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class ApiMembersHistoryGetResponse(RootModel[List[MemberHistoryItem]]):
    root: List[MemberHistoryItem]


class ApiPostsSpeakerAndDeputiesForDateGetResponse(RootModel[List[MemberItem]]):
    root: List[MemberItem]


class ConstituencyRepresentation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    member: Optional[MemberItem] = None
    representation: Optional[HouseMembership] = None


class ConstituencyRepresentationListItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[List[ConstituencyRepresentation]] = None


class GovernmentOppositionPostHolder(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endDate: Optional[datetime] = None
    isPaid: Optional[bool] = None
    layingMinisterName: Optional[str] = None
    member: Optional[MemberItem] = None
    startDate: Optional[datetime] = None


class Constituency(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    currentRepresentation: Optional[ConstituencyRepresentation] = None
    endDate: Optional[datetime] = None
    id: Optional[int] = None
    name: Optional[str] = None
    startDate: Optional[datetime] = None


class ConstituencyItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[Constituency] = None


class ConstituencyMembersServiceSearchResult(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: Optional[List[ConstituencyItem]] = None
    links: Optional[List[Link]] = None
    resultContext: Optional[str] = None
    skip: Optional[int] = None
    take: Optional[int] = None
    totalResults: Optional[int] = None


class GovernmentOppositionPost(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createdWhen: Optional[datetime] = None
    governmentDepartments: Optional[List[GovernmentDepartment]] = None
    hansardName: Optional[str] = None
    id: Optional[int] = None
    name: Optional[str] = None
    order: Optional[int] = None
    postHolders: Optional[List[GovernmentOppositionPostHolder]] = None
    type: Optional[PostType] = None


class GovernmentOppositionPostItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    links: Optional[List[Link]] = None
    value: Optional[GovernmentOppositionPost] = None


class ApiPostsGovernmentPostsGetResponse(RootModel[List[GovernmentOppositionPostItem]]):
    root: List[GovernmentOppositionPostItem]


class ApiPostsOppositionPostsGetResponse(RootModel[List[GovernmentOppositionPostItem]]):
    root: List[GovernmentOppositionPostItem]


class ApiPostsSpokespersonsGetResponse(RootModel[List[GovernmentOppositionPostItem]]):
    root: List[GovernmentOppositionPostItem]


RegisteredInterest.model_rebuild()
